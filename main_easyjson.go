// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package main

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson89aae3efDecodeGithubComNsherron90FlippaScrape(in *jlexer.Lexer, out *Flippa) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]struct {
							Type                  string        `json:"type"`
							ID                    string        `json:"id"`
							AppDownloadsPerMonth  interface{}   `json:"app_downloads_per_month"`
							AverageProfit         interface{}   `json:"average_profit"`
							AverageRevenue        interface{}   `json:"average_revenue"`
							BidCount              int           `json:"bid_count"`
							BusinessModel         string        `json:"business_model"`
							BuyItNowPrice         interface{}   `json:"buy_it_now_price"`
							Confidential          bool          `json:"confidential"`
							CurrentPrice          int           `json:"current_price"`
							EndsAt                time.Time     `json:"ends_at"`
							EstablishedAt         time.Time     `json:"established_at"`
							ExternalURL           string        `json:"external_url"`
							HasVerifiedRevenue    bool          `json:"has_verified_revenue"`
							HasVerifiedTraffic    bool          `json:"has_verified_traffic"`
							HTMLURL               string        `json:"html_url"`
							Hostname              string        `json:"hostname"`
							Industry              string        `json:"industry"`
							PageViewsPerMonth     interface{}   `json:"page_views_per_month"`
							PostAuctionNegotiable bool          `json:"post_auction_negotiable"`
							ProfitPerMonth        interface{}   `json:"profit_per_month"`
							PropertyName          string        `json:"property_name"`
							PropertyType          string        `json:"property_type"`
							ReserveMet            bool          `json:"reserve_met"`
							RevenuePerMonth       interface{}   `json:"revenue_per_month"`
							RevenueSources        []interface{} `json:"revenue_sources"`
							SaleMethod            string        `json:"sale_method"`
							StartsAt              time.Time     `json:"starts_at"`
							Status                string        `json:"status"`
							Summary               string        `json:"summary"`
							Title                 string        `json:"title"`
							UniquesPerMonth       interface{}   `json:"uniques_per_month"`
							Watching              bool          `json:"watching"`
						}, 0, 1)
					} else {
						out.Data = []struct {
							Type                  string        `json:"type"`
							ID                    string        `json:"id"`
							AppDownloadsPerMonth  interface{}   `json:"app_downloads_per_month"`
							AverageProfit         interface{}   `json:"average_profit"`
							AverageRevenue        interface{}   `json:"average_revenue"`
							BidCount              int           `json:"bid_count"`
							BusinessModel         string        `json:"business_model"`
							BuyItNowPrice         interface{}   `json:"buy_it_now_price"`
							Confidential          bool          `json:"confidential"`
							CurrentPrice          int           `json:"current_price"`
							EndsAt                time.Time     `json:"ends_at"`
							EstablishedAt         time.Time     `json:"established_at"`
							ExternalURL           string        `json:"external_url"`
							HasVerifiedRevenue    bool          `json:"has_verified_revenue"`
							HasVerifiedTraffic    bool          `json:"has_verified_traffic"`
							HTMLURL               string        `json:"html_url"`
							Hostname              string        `json:"hostname"`
							Industry              string        `json:"industry"`
							PageViewsPerMonth     interface{}   `json:"page_views_per_month"`
							PostAuctionNegotiable bool          `json:"post_auction_negotiable"`
							ProfitPerMonth        interface{}   `json:"profit_per_month"`
							PropertyName          string        `json:"property_name"`
							PropertyType          string        `json:"property_type"`
							ReserveMet            bool          `json:"reserve_met"`
							RevenuePerMonth       interface{}   `json:"revenue_per_month"`
							RevenueSources        []interface{} `json:"revenue_sources"`
							SaleMethod            string        `json:"sale_method"`
							StartsAt              time.Time     `json:"starts_at"`
							Status                string        `json:"status"`
							Summary               string        `json:"summary"`
							Title                 string        `json:"title"`
							UniquesPerMonth       interface{}   `json:"uniques_per_month"`
							Watching              bool          `json:"watching"`
						}{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v1 struct {
						Type                  string        `json:"type"`
						ID                    string        `json:"id"`
						AppDownloadsPerMonth  interface{}   `json:"app_downloads_per_month"`
						AverageProfit         interface{}   `json:"average_profit"`
						AverageRevenue        interface{}   `json:"average_revenue"`
						BidCount              int           `json:"bid_count"`
						BusinessModel         string        `json:"business_model"`
						BuyItNowPrice         interface{}   `json:"buy_it_now_price"`
						Confidential          bool          `json:"confidential"`
						CurrentPrice          int           `json:"current_price"`
						EndsAt                time.Time     `json:"ends_at"`
						EstablishedAt         time.Time     `json:"established_at"`
						ExternalURL           string        `json:"external_url"`
						HasVerifiedRevenue    bool          `json:"has_verified_revenue"`
						HasVerifiedTraffic    bool          `json:"has_verified_traffic"`
						HTMLURL               string        `json:"html_url"`
						Hostname              string        `json:"hostname"`
						Industry              string        `json:"industry"`
						PageViewsPerMonth     interface{}   `json:"page_views_per_month"`
						PostAuctionNegotiable bool          `json:"post_auction_negotiable"`
						ProfitPerMonth        interface{}   `json:"profit_per_month"`
						PropertyName          string        `json:"property_name"`
						PropertyType          string        `json:"property_type"`
						ReserveMet            bool          `json:"reserve_met"`
						RevenuePerMonth       interface{}   `json:"revenue_per_month"`
						RevenueSources        []interface{} `json:"revenue_sources"`
						SaleMethod            string        `json:"sale_method"`
						StartsAt              time.Time     `json:"starts_at"`
						Status                string        `json:"status"`
						Summary               string        `json:"summary"`
						Title                 string        `json:"title"`
						UniquesPerMonth       interface{}   `json:"uniques_per_month"`
						Watching              bool          `json:"watching"`
					}
					easyjson89aae3efDecode(in, &v1)
					out.Data = append(out.Data, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncodeGithubComNsherron90FlippaScrape(out *jwriter.Writer, in Flippa) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Data {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjson89aae3efEncode(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Flippa) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson89aae3efEncodeGithubComNsherron90FlippaScrape(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Flippa) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson89aae3efEncodeGithubComNsherron90FlippaScrape(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Flippa) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson89aae3efDecodeGithubComNsherron90FlippaScrape(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Flippa) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson89aae3efDecodeGithubComNsherron90FlippaScrape(l, v)
}
func easyjson89aae3efDecode(in *jlexer.Lexer, out *struct {
	Type                  string        `json:"type"`
	ID                    string        `json:"id"`
	AppDownloadsPerMonth  interface{}   `json:"app_downloads_per_month"`
	AverageProfit         interface{}   `json:"average_profit"`
	AverageRevenue        interface{}   `json:"average_revenue"`
	BidCount              int           `json:"bid_count"`
	BusinessModel         string        `json:"business_model"`
	BuyItNowPrice         interface{}   `json:"buy_it_now_price"`
	Confidential          bool          `json:"confidential"`
	CurrentPrice          int           `json:"current_price"`
	EndsAt                time.Time     `json:"ends_at"`
	EstablishedAt         time.Time     `json:"established_at"`
	ExternalURL           string        `json:"external_url"`
	HasVerifiedRevenue    bool          `json:"has_verified_revenue"`
	HasVerifiedTraffic    bool          `json:"has_verified_traffic"`
	HTMLURL               string        `json:"html_url"`
	Hostname              string        `json:"hostname"`
	Industry              string        `json:"industry"`
	PageViewsPerMonth     interface{}   `json:"page_views_per_month"`
	PostAuctionNegotiable bool          `json:"post_auction_negotiable"`
	ProfitPerMonth        interface{}   `json:"profit_per_month"`
	PropertyName          string        `json:"property_name"`
	PropertyType          string        `json:"property_type"`
	ReserveMet            bool          `json:"reserve_met"`
	RevenuePerMonth       interface{}   `json:"revenue_per_month"`
	RevenueSources        []interface{} `json:"revenue_sources"`
	SaleMethod            string        `json:"sale_method"`
	StartsAt              time.Time     `json:"starts_at"`
	Status                string        `json:"status"`
	Summary               string        `json:"summary"`
	Title                 string        `json:"title"`
	UniquesPerMonth       interface{}   `json:"uniques_per_month"`
	Watching              bool          `json:"watching"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "app_downloads_per_month":
			if m, ok := out.AppDownloadsPerMonth.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.AppDownloadsPerMonth.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.AppDownloadsPerMonth = in.Interface()
			}
		case "average_profit":
			if m, ok := out.AverageProfit.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.AverageProfit.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.AverageProfit = in.Interface()
			}
		case "average_revenue":
			if m, ok := out.AverageRevenue.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.AverageRevenue.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.AverageRevenue = in.Interface()
			}
		case "bid_count":
			out.BidCount = int(in.Int())
		case "business_model":
			out.BusinessModel = string(in.String())
		case "buy_it_now_price":
			if m, ok := out.BuyItNowPrice.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.BuyItNowPrice.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.BuyItNowPrice = in.Interface()
			}
		case "confidential":
			out.Confidential = bool(in.Bool())
		case "current_price":
			out.CurrentPrice = int(in.Int())
		case "ends_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EndsAt).UnmarshalJSON(data))
			}
		case "established_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.EstablishedAt).UnmarshalJSON(data))
			}
		case "external_url":
			out.ExternalURL = string(in.String())
		case "has_verified_revenue":
			out.HasVerifiedRevenue = bool(in.Bool())
		case "has_verified_traffic":
			out.HasVerifiedTraffic = bool(in.Bool())
		case "html_url":
			out.HTMLURL = string(in.String())
		case "hostname":
			out.Hostname = string(in.String())
		case "industry":
			out.Industry = string(in.String())
		case "page_views_per_month":
			if m, ok := out.PageViewsPerMonth.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.PageViewsPerMonth.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.PageViewsPerMonth = in.Interface()
			}
		case "post_auction_negotiable":
			out.PostAuctionNegotiable = bool(in.Bool())
		case "profit_per_month":
			if m, ok := out.ProfitPerMonth.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ProfitPerMonth.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ProfitPerMonth = in.Interface()
			}
		case "property_name":
			out.PropertyName = string(in.String())
		case "property_type":
			out.PropertyType = string(in.String())
		case "reserve_met":
			out.ReserveMet = bool(in.Bool())
		case "revenue_per_month":
			if m, ok := out.RevenuePerMonth.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.RevenuePerMonth.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.RevenuePerMonth = in.Interface()
			}
		case "revenue_sources":
			if in.IsNull() {
				in.Skip()
				out.RevenueSources = nil
			} else {
				in.Delim('[')
				if out.RevenueSources == nil {
					if !in.IsDelim(']') {
						out.RevenueSources = make([]interface{}, 0, 4)
					} else {
						out.RevenueSources = []interface{}{}
					}
				} else {
					out.RevenueSources = (out.RevenueSources)[:0]
				}
				for !in.IsDelim(']') {
					var v4 interface{}
					if m, ok := v4.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v4.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v4 = in.Interface()
					}
					out.RevenueSources = append(out.RevenueSources, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sale_method":
			out.SaleMethod = string(in.String())
		case "starts_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartsAt).UnmarshalJSON(data))
			}
		case "status":
			out.Status = string(in.String())
		case "summary":
			out.Summary = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "uniques_per_month":
			if m, ok := out.UniquesPerMonth.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.UniquesPerMonth.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.UniquesPerMonth = in.Interface()
			}
		case "watching":
			out.Watching = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson89aae3efEncode(out *jwriter.Writer, in struct {
	Type                  string        `json:"type"`
	ID                    string        `json:"id"`
	AppDownloadsPerMonth  interface{}   `json:"app_downloads_per_month"`
	AverageProfit         interface{}   `json:"average_profit"`
	AverageRevenue        interface{}   `json:"average_revenue"`
	BidCount              int           `json:"bid_count"`
	BusinessModel         string        `json:"business_model"`
	BuyItNowPrice         interface{}   `json:"buy_it_now_price"`
	Confidential          bool          `json:"confidential"`
	CurrentPrice          int           `json:"current_price"`
	EndsAt                time.Time     `json:"ends_at"`
	EstablishedAt         time.Time     `json:"established_at"`
	ExternalURL           string        `json:"external_url"`
	HasVerifiedRevenue    bool          `json:"has_verified_revenue"`
	HasVerifiedTraffic    bool          `json:"has_verified_traffic"`
	HTMLURL               string        `json:"html_url"`
	Hostname              string        `json:"hostname"`
	Industry              string        `json:"industry"`
	PageViewsPerMonth     interface{}   `json:"page_views_per_month"`
	PostAuctionNegotiable bool          `json:"post_auction_negotiable"`
	ProfitPerMonth        interface{}   `json:"profit_per_month"`
	PropertyName          string        `json:"property_name"`
	PropertyType          string        `json:"property_type"`
	ReserveMet            bool          `json:"reserve_met"`
	RevenuePerMonth       interface{}   `json:"revenue_per_month"`
	RevenueSources        []interface{} `json:"revenue_sources"`
	SaleMethod            string        `json:"sale_method"`
	StartsAt              time.Time     `json:"starts_at"`
	Status                string        `json:"status"`
	Summary               string        `json:"summary"`
	Title                 string        `json:"title"`
	UniquesPerMonth       interface{}   `json:"uniques_per_month"`
	Watching              bool          `json:"watching"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"app_downloads_per_month\":"
		out.RawString(prefix)
		if m, ok := in.AppDownloadsPerMonth.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.AppDownloadsPerMonth.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.AppDownloadsPerMonth))
		}
	}
	{
		const prefix string = ",\"average_profit\":"
		out.RawString(prefix)
		if m, ok := in.AverageProfit.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.AverageProfit.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.AverageProfit))
		}
	}
	{
		const prefix string = ",\"average_revenue\":"
		out.RawString(prefix)
		if m, ok := in.AverageRevenue.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.AverageRevenue.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.AverageRevenue))
		}
	}
	{
		const prefix string = ",\"bid_count\":"
		out.RawString(prefix)
		out.Int(int(in.BidCount))
	}
	{
		const prefix string = ",\"business_model\":"
		out.RawString(prefix)
		out.String(string(in.BusinessModel))
	}
	{
		const prefix string = ",\"buy_it_now_price\":"
		out.RawString(prefix)
		if m, ok := in.BuyItNowPrice.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.BuyItNowPrice.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.BuyItNowPrice))
		}
	}
	{
		const prefix string = ",\"confidential\":"
		out.RawString(prefix)
		out.Bool(bool(in.Confidential))
	}
	{
		const prefix string = ",\"current_price\":"
		out.RawString(prefix)
		out.Int(int(in.CurrentPrice))
	}
	{
		const prefix string = ",\"ends_at\":"
		out.RawString(prefix)
		out.Raw((in.EndsAt).MarshalJSON())
	}
	{
		const prefix string = ",\"established_at\":"
		out.RawString(prefix)
		out.Raw((in.EstablishedAt).MarshalJSON())
	}
	{
		const prefix string = ",\"external_url\":"
		out.RawString(prefix)
		out.String(string(in.ExternalURL))
	}
	{
		const prefix string = ",\"has_verified_revenue\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasVerifiedRevenue))
	}
	{
		const prefix string = ",\"has_verified_traffic\":"
		out.RawString(prefix)
		out.Bool(bool(in.HasVerifiedTraffic))
	}
	{
		const prefix string = ",\"html_url\":"
		out.RawString(prefix)
		out.String(string(in.HTMLURL))
	}
	{
		const prefix string = ",\"hostname\":"
		out.RawString(prefix)
		out.String(string(in.Hostname))
	}
	{
		const prefix string = ",\"industry\":"
		out.RawString(prefix)
		out.String(string(in.Industry))
	}
	{
		const prefix string = ",\"page_views_per_month\":"
		out.RawString(prefix)
		if m, ok := in.PageViewsPerMonth.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.PageViewsPerMonth.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.PageViewsPerMonth))
		}
	}
	{
		const prefix string = ",\"post_auction_negotiable\":"
		out.RawString(prefix)
		out.Bool(bool(in.PostAuctionNegotiable))
	}
	{
		const prefix string = ",\"profit_per_month\":"
		out.RawString(prefix)
		if m, ok := in.ProfitPerMonth.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ProfitPerMonth.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ProfitPerMonth))
		}
	}
	{
		const prefix string = ",\"property_name\":"
		out.RawString(prefix)
		out.String(string(in.PropertyName))
	}
	{
		const prefix string = ",\"property_type\":"
		out.RawString(prefix)
		out.String(string(in.PropertyType))
	}
	{
		const prefix string = ",\"reserve_met\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReserveMet))
	}
	{
		const prefix string = ",\"revenue_per_month\":"
		out.RawString(prefix)
		if m, ok := in.RevenuePerMonth.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.RevenuePerMonth.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.RevenuePerMonth))
		}
	}
	{
		const prefix string = ",\"revenue_sources\":"
		out.RawString(prefix)
		if in.RevenueSources == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.RevenueSources {
				if v5 > 0 {
					out.RawByte(',')
				}
				if m, ok := v6.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v6.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v6))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"sale_method\":"
		out.RawString(prefix)
		out.String(string(in.SaleMethod))
	}
	{
		const prefix string = ",\"starts_at\":"
		out.RawString(prefix)
		out.Raw((in.StartsAt).MarshalJSON())
	}
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"summary\":"
		out.RawString(prefix)
		out.String(string(in.Summary))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"uniques_per_month\":"
		out.RawString(prefix)
		if m, ok := in.UniquesPerMonth.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.UniquesPerMonth.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.UniquesPerMonth))
		}
	}
	{
		const prefix string = ",\"watching\":"
		out.RawString(prefix)
		out.Bool(bool(in.Watching))
	}
	out.RawByte('}')
}
